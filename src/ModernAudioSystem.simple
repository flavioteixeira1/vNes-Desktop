// ModernAudioSystemSimple.java
import javax.sound.sampled.*;

public class ModernAudioSystem {
    private SourceDataLine line;
    private boolean audioSystemReady = false;
    
    public ModernAudioSystem() {
        initialize();
    }
    
    private void initialize() {
        try {
            AudioFormat format = new AudioFormat(44100, 16, 2, true, false);
            
            // Forçar device específico que funcionou
            Mixer.Info targetMixer = findWorkingMixer();
            Mixer mixer = targetMixer != null ? AudioSystem.getMixer(targetMixer) : null;
            
            DataLine.Info info = new DataLine.Info(SourceDataLine.class, format, 16384);
            line = mixer != null ? 
                (SourceDataLine) mixer.getLine(info) : 
                (SourceDataLine) AudioSystem.getLine(info);
            
            line.open(format, 16384);
            line.start();
            
            audioSystemReady = true;
            System.out.println("ModernAudioSystem inicializado com device: " + 
                             (targetMixer != null ? targetMixer.getName() : "default"));
            
        } catch (Exception e) {
            System.err.println("Erro ao inicializar áudio: " + e.getMessage());
            audioSystemReady = false;
        }
    }
    
    private Mixer.Info findWorkingMixer() {
        for (Mixer.Info info : AudioSystem.getMixerInfo()) {
            if (info.getName().contains("Intel [plughw:0,0]") || 
                info.getName().contains("default")) {
                return info;
            }
        }
        return null;
    }
    
    public boolean writeBuffer(byte[] audioData) {
        if (audioSystemReady && line != null) {
            try {
                line.write(audioData, 0, audioData.length);
                return true;
            } catch (Exception e) {
                System.err.println("Erro ao escrever áudio: " + e.getMessage());
                return false;
            }
        }
        return false;
    }
    
    public boolean writeBuffer(byte[] buffer, int offset, int length) {
        return writeBuffer(buffer); // Para compatibilidade
    }
    
    public void stop() {
        if (line != null) {
            line.stop();
            line.close();
            line = null;
        }
        audioSystemReady = false;
    }
    
    public boolean isAudioSystemReady() {
        return audioSystemReady && line != null && line.isOpen();
    }
    
    public void drain() {
        if (line != null) line.drain();
    }
}